# RS_ptif configuration

# This must be set to NULL in order to fix a bug within ResourceSpace
# where resource files are not properly deleted if this value is set to anything other than NULL.
# This bug resides in include/resource_functions.php:2015.
$resource_deletion_state = NULL;


# You can use either $iiif_imagehub_commands if the Imagehub is locally installed
# or $iiif_imagehub_curl_calls if the Imagehub is installed remotely

# Commands to be locally executed after an image is uploaded.
# {ref} will be automatically replaced by the corresponding resource ID by the plugin.
$iiif_imagehub_commands = array(
);

# cURL calls to be executed after an image is uploaded.
# {ref} will be automatically replaced by the corresponding resource ID by the plugin.
$iiif_imagehub_curl_calls = array(
);

# The URL of a IIIF manifest generated by one of the above commands.
# {ref} will be automatically replaced by the corresponding resource ID by the plugin.
$iiif_imagehub_manifest_url = '{{ imagehub.service_url }}/{ref}/manifest.json';

# Clickable URLs to be shown above the preview image in ResourceSpace.
# {manifest_url} will be automatically replaced by the manifest URL as defined in the line above by the plugin.
$iiif_imagehub_viewers = array(
    'manifest'          => '{manifest_url}'
);


# Name of the folder where the ptif files are stored (relative to the filestore/ directory).
# Must contain a leading and trailing slash.
$iiif_ptif_filestore = '/iiif_ptif/';

# Key (shorthand name of the metadata field) and value to determine which images are cleared for public
# Key can be set to NULL if all images should be private
$iiif_ptif_public_key = 'clearedforusage';
$iiif_ptif_public_value = 'Public use';

# Folder to store private images, trailing slash is important
$iiif_ptif_private_folder = 'private/';

# Folder to store public images, trailing slash is important
# Can be set to NULL if all images should be private
$iiif_ptif_public_folder = 'public/';

# Metadata field that denotes the quality of the generated PTIF image
$iiif_ptif_quality_field = 'iiifquality';

# CLI Commands to perform image conversion to PTIF.
# 'extensions' defines a list of file extensions and the command that should be used to convert images with these extensions to PTIF.
# 'command' should probably be 'vips im_vips2tiff' or 'convert', but accepts any installed command for image conversion (can be the full path to an executable).
# 'arguments' defines extra command line arguments for the conversion command.
# 'dest_prefix' will be prefixed to the destination path, necessary for convert.
# 'dest_postfix' will be postfixed to the destination path, necessary for vips.
$iiif_ptif_commands = array(
    # vips cannot properly handle psb, so we need to use convert instead.
    array(
        'extensions'   => array('jpg', 'jpeg', 'psb'),
        'command'      => 'convert',
        'arguments'    => '-define tiff:tile-geometry=256x256 -colorspace sRGB -compress jpeg -quality #ptif_quality# -depth 8',
        'dest_prefix'  => 'ptif:',
        'dest_postfix' => ''
    ),
    # define catchall command for all other extensions with '*'
    # vips is generally faster and consumes fewer resources than convert, so use wherever possible.
    array(
        'extensions'   => array('*'),
        'command'      => 'vips im_vips2tiff',
        'arguments'    => '',
        'dest_prefix'  => '',
        'dest_postfix' => ':jpeg:#ptif_quality#,tile:256x256,pyramid'
    )
);

$file_checksums     = true;
$file_checksums_50k = true;
$file_checksums_offline = false;
$file_checksums_fullfile = false;
$file_upload_block_duplicates = true;

